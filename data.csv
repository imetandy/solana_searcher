,file_path,matches
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 185, 'line_content': 'curve25519-dalek = ""3.2.1""'}, {'line_number': 514, 'line_content': '# Our dependency tree has `curve25519-dalek` v3.2.1.  They have removed the'}, {'line_number': 518, 'line_content': '# `curve25519-dalek` maintainers are saying they do not want to invest any more'}, {'line_number': 521, 'line_content': '# https://github.com/dalek-cryptography/curve25519-dalek/issues/452#issuecomment-1749809428'}, {'line_number': 527, 'line_content': '# `curve25519-dalek` v3.2.1 release:'}, {'line_number': 529, 'line_content': '# https://github.com/dalek-cryptography/curve25519-dalek/releases/tag/3.2.1'}, {'line_number': 533, 'line_content': '# https://github.com/dalek-cryptography/curve25519-dalek/commit/29e5c29b0e5c6821e4586af58b0d0891dd2ec639'}, {'line_number': 537, 'line_content': '# https://github.com/dalek-cryptography/curve25519-dalek/compare/3.2.1...solana-labs:curve25519-dalek:b500cdc2a920cd5bff9e2dd974d7b97349d61464'}, {'line_number': 541, 'line_content': '# https://github.com/dalek-cryptography/curve25519-dalek/compare/3.2.1...solana-labs:curve25519-dalek:3.2.1-unpin-zeroize'}, {'line_number': 543, 'line_content': '[patch.crates-io.curve25519-dalek]'}, {'line_number': 544, 'line_content': 'git = ""https://github.com/anza-xyz/curve25519-dalek.git""'}]"
1,/Users/andrew/Documents/projects/solana/zk-token-sdk/Cargo.toml,"[{'line_number': 26, 'line_content': 'curve25519-dalek = { workspace = true, features = [""serde""] }'}]"
2,/Users/andrew/Documents/projects/solana/zk-token-sdk/src/encryption/mod.rs,"[{'line_number': 6, 'line_content': '//! [curve25519-dalek](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/ristretto/index.html)'}]"
3,/Users/andrew/Documents/projects/solana/programs/zk-token-proof-tests/Cargo.toml,"[{'line_number': 12, 'line_content': 'curve25519-dalek = { workspace = true }'}]"
4,/Users/andrew/Documents/projects/solana/programs/zk-token-proof/Cargo.toml,"[{'line_number': 21, 'line_content': 'curve25519-dalek = { workspace = true }'}]"
5,/Users/andrew/Documents/projects/solana/sdk/Cargo.toml,"[{'line_number': 50, 'line_content': 'curve25519-dalek = { workspace = true, optional = true }'}, {'line_number': 93, 'line_content': 'curve25519-dalek = { workspace = true }'}]"
6,/Users/andrew/Documents/projects/solana/sdk/program/Cargo.toml,"[{'line_number': 57, 'line_content': 'curve25519-dalek = { workspace = true, features = [""serde""] }'}]"
7,/Users/andrew/Documents/projects/solana/perf/Cargo.toml,"[{'line_number': 16, 'line_content': 'curve25519-dalek = { workspace = true }'}]"
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 305, 'line_content': 'siphasher = ""0.3.11""'}]"
1,/Users/andrew/Documents/projects/solana/sdk/Cargo.toml,"[{'line_number': 78, 'line_content': 'siphasher = { workspace = true }'}]"
2,/Users/andrew/Documents/projects/solana/sdk/src/epoch_rewards_hasher.rs,"[{'line_number': 2, 'line_content': 'siphasher::sip::SipHasher13,'}]"
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 194, 'line_content': 'ed25519-dalek = ""=1.0.1""'}, {'line_number': 195, 'line_content': 'ed25519-dalek-bip32 = ""0.2.0""'}]"
1,/Users/andrew/Documents/projects/solana/core/src/banking_stage/latest_unprocessed_votes.rs,"[{'line_number': 116, 'line_content': '// This requires updating dependencies of ed25519-dalek as rand_core is not compatible cross'}, {'line_number': 117, 'line_content': '// version https://github.com/dalek-cryptography/ed25519-dalek/pull/214'}]"
2,/Users/andrew/Documents/projects/solana/runtime/Cargo.toml,"[{'line_number': 88, 'line_content': 'ed25519-dalek = { workspace = true }'}]"
3,/Users/andrew/Documents/projects/solana/runtime/src/bank/tests.rs,"[{'line_number': 10023, 'line_content': '// https://docs.rs/ed25519-dalek/1.0.1/src/ed25519_dalek/secret.rs.html#167'}]"
4,/Users/andrew/Documents/projects/solana/programs/ed25519-tests/Cargo.toml,"[{'line_number': 13, 'line_content': 'ed25519-dalek = { workspace = true }'}]"
5,/Users/andrew/Documents/projects/solana/programs/ed25519-tests/tests/process_transaction.rs,"[{'line_number': 13, 'line_content': '// https://docs.rs/ed25519-dalek/1.0.1/src/ed25519_dalek/secret.rs.html#167'}]"
6,/Users/andrew/Documents/projects/solana/sdk/Cargo.toml,"[{'line_number': 31, 'line_content': '""ed25519-dalek"",'}, {'line_number': 32, 'line_content': '""ed25519-dalek-bip32"",'}, {'line_number': 53, 'line_content': 'ed25519-dalek = { workspace = true, optional = true }'}, {'line_number': 54, 'line_content': 'ed25519-dalek-bip32 = { workspace = true, optional = true }'}]"
7,/Users/andrew/Documents/projects/solana/sdk/src/signature.rs,"[{'line_number': 208, 'line_content': ""// Unfortunately, ed25519-dalek doesn't surface the internal error types that we'd ideally""}]"
8,/Users/andrew/Documents/projects/solana/cli-output/Cargo.toml,"[{'line_number': 34, 'line_content': 'ed25519-dalek = { workspace = true }'}]"
9,/Users/andrew/Documents/projects/solana/accounts-db/Cargo.toml,"[{'line_number': 72, 'line_content': 'ed25519-dalek = { workspace = true }'}]"
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 290, 'line_content': 'rustls = { version = ""0.21.11"", default-features = false, features = [""quic""] }'}]"
1,/Users/andrew/Documents/projects/solana/metrics/Cargo.toml,"[{'line_number': 17, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""brotli"", ""deflate"", ""gzip"", ""rustls-tls"", ""json""] }'}]"
2,/Users/andrew/Documents/projects/solana/rpc-test/Cargo.toml,"[{'line_number': 19, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""brotli"", ""deflate"", ""gzip"", ""rustls-tls"", ""json""] }'}]"
3,/Users/andrew/Documents/projects/solana/quic-client/Cargo.toml,"[{'line_number': 22, 'line_content': 'rustls = { workspace = true, features = [""dangerous_configuration""] }'}]"
4,/Users/andrew/Documents/projects/solana/quic-client/tests/quic_client.rs,"[{'line_number': 16, 'line_content': 'tls_certificates::new_self_signed_tls_certificate,'}, {'line_number': 279, 'line_content': 'new_self_signed_tls_certificate(&Keypair::new(), IpAddr::V4(Ipv4Addr::UNSPECIFIED))'}, {'line_number': 301, 'line_content': 'new_self_signed_tls_certificate(&Keypair::new(), IpAddr::V4(Ipv4Addr::LOCALHOST))'}]"
5,/Users/andrew/Documents/projects/solana/quic-client/src/lib.rs,"[{'line_number': 33, 'line_content': 'tls_certificates::new_self_signed_tls_certificate,'}, {'line_number': 115, 'line_content': 'let (cert, priv_key) = new_self_signed_tls_certificate(&Keypair::new(), addr)?;'}, {'line_number': 158, 'line_content': 'let (cert, priv_key) = new_self_signed_tls_certificate(keypair, ipaddr)?;'}, {'line_number': 171, 'line_content': 'let (cert, priv_key) = new_self_signed_tls_certificate(keypair, self.addr)?;'}]"
6,/Users/andrew/Documents/projects/solana/quic-client/src/nonblocking/quic_client.rs,"[{'line_number': 30, 'line_content': 'nonblocking::quic::ALPN_TPU_PROTOCOL_ID, tls_certificates::new_self_signed_tls_certificate,'}, {'line_number': 49, 'line_content': 'impl rustls::client::ServerCertVerifier for SkipServerVerification {'}, {'line_number': 52, 'line_content': '_end_entity: &rustls::Certificate,'}, {'line_number': 53, 'line_content': '_intermediates: &[rustls::Certificate],'}, {'line_number': 54, 'line_content': '_server_name: &rustls::ServerName,'}, {'line_number': 58, 'line_content': ') -> Result<rustls::client::ServerCertVerified, rustls::Error> {'}, {'line_number': 59, 'line_content': 'Ok(rustls::client::ServerCertVerified::assertion())'}, {'line_number': 64, 'line_content': 'pub certificate: rustls::Certificate,'}, {'line_number': 65, 'line_content': 'pub key: rustls::PrivateKey,'}, {'line_number': 117, 'line_content': 'let mut crypto = rustls::ClientConfig::builder()'}, {'line_number': 152, 'line_content': 'new_self_signed_tls_certificate(&Keypair::new(), IpAddr::V4(Ipv4Addr::UNSPECIFIED))'}]"
7,/Users/andrew/Documents/projects/solana/install/Cargo.toml,"[{'line_number': 25, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""brotli"", ""deflate"", ""gzip"", ""rustls-tls"", ""json""] }'}]"
8,/Users/andrew/Documents/projects/solana/core/Cargo.toml,"[{'line_number': 25, 'line_content': 'etcd-client = { workspace = true, features = [""tls""] }'}, {'line_number': 41, 'line_content': 'rustls = { workspace = true }'}]"
9,/Users/andrew/Documents/projects/solana/core/src/consensus/tower_storage.rs,"[{'line_number': 234, 'line_content': 'tls_config: Option<EtcdTlsConfig>,'}, {'line_number': 245, 'line_content': 'tls_config.map(|tls_config| {'}, {'line_number': 246, 'line_content': 'etcd_client::ConnectOptions::default().with_tls('}, {'line_number': 248, 'line_content': '.domain_name(tls_config.domain_name)'}, {'line_number': 250, 'line_content': 'tls_config.ca_certificate,'}, {'line_number': 253, 'line_content': 'tls_config.identity_certificate,'}, {'line_number': 254, 'line_content': 'tls_config.identity_private_key,'}]"
10,/Users/andrew/Documents/projects/solana/core/src/repair/quic_endpoint.rs,"[{'line_number': 13, 'line_content': 'rustls::{Certificate, PrivateKey},'}, {'line_number': 19, 'line_content': 'quic::SkipClientVerification, tls_certificates::new_self_signed_tls_certificate,'}, {'line_number': 110, 'line_content': 'TlsError(#[from] rustls::Error),'}, {'line_number': 130, 'line_content': 'let (cert, key) = new_self_signed_tls_certificate(keypair, address)?;'}, {'line_number': 177, 'line_content': 'fn new_server_config(cert: Certificate, key: PrivateKey) -> Result<ServerConfig, rustls::Error> {'}, {'line_number': 178, 'line_content': 'let mut config = rustls::ServerConfig::builder()'}, {'line_number': 191, 'line_content': 'fn new_client_config(cert: Certificate, key: PrivateKey) -> Result<ClientConfig, rustls::Error> {'}, {'line_number': 192, 'line_content': 'let mut config = rustls::ClientConfig::builder()'}]"
11,/Users/andrew/Documents/projects/solana/validator/src/main.rs,"[{'line_number': 1143, 'line_content': 'let tls_config = tower_storage::EtcdTlsConfig {'}, {'line_number': 1151, 'line_content': 'tower_storage::EtcdTowerStorage::new(endpoints, Some(tls_config))'}]"
12,/Users/andrew/Documents/projects/solana/notifier/Cargo.toml,"[{'line_number': 14, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""brotli"", ""deflate"", ""gzip"", ""rustls-tls"", ""json""] }'}]"
13,/Users/andrew/Documents/projects/solana/download-utils/Cargo.toml,"[{'line_number': 16, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""brotli"", ""deflate"", ""gzip"", ""rustls-tls"", ""json""] }'}]"
14,/Users/andrew/Documents/projects/solana/target/release/build/librocksdb-sys-3008184acd024ead/out/bindings.rs,"[{'line_number': 1372, 'line_content': 'ttls: *const libc::c_int,'}]"
15,/Users/andrew/Documents/projects/solana/target/debug/build/librocksdb-sys-4b34bc0f67e26a76/out/bindings.rs,"[{'line_number': 1372, 'line_content': 'ttls: *const libc::c_int,'}]"
16,/Users/andrew/Documents/projects/solana/client-test/Cargo.toml,"[{'line_number': 36, 'line_content': 'tungstenite = { workspace = true, features = [""rustls-tls-webpki-roots""] }'}]"
17,/Users/andrew/Documents/projects/solana/pubsub-client/Cargo.toml,"[{'line_number': 16, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""brotli"", ""deflate"", ""gzip"", ""rustls-tls"", ""json""] }'}, {'line_number': 27, 'line_content': 'tokio-tungstenite = { workspace = true, features = [""rustls-tls-webpki-roots""] }'}, {'line_number': 28, 'line_content': 'tungstenite = { workspace = true, features = [""rustls-tls-webpki-roots""] }'}]"
18,/Users/andrew/Documents/projects/solana/cli/Cargo.toml,"[{'line_number': 26, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""brotli"", ""deflate"", ""gzip"", ""rustls-tls"", ""json""] }'}]"
19,/Users/andrew/Documents/projects/solana/rpc-client/Cargo.toml,"[{'line_number': 19, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""brotli"", ""deflate"", ""gzip"", ""rustls-tls"", ""json""] }'}]"
20,/Users/andrew/Documents/projects/solana/rpc-client/src/nonblocking/rpc_client.rs,"[{'line_number': 5398, 'line_content': 'pub(crate) fn get_rpc_request_str(rpc_addr: SocketAddr, tls: bool) -> String {'}, {'line_number': 5399, 'line_content': 'if tls {'}]"
21,/Users/andrew/Documents/projects/solana/streamer/Cargo.toml,"[{'line_number': 30, 'line_content': 'rustls = { workspace = true, features = [""dangerous_configuration""] }'}]"
22,/Users/andrew/Documents/projects/solana/streamer/src/quic.rs,"[{'line_number': 4, 'line_content': 'tls_certificates::new_self_signed_tls_certificate,'}, {'line_number': 9, 'line_content': 'rustls::{server::ClientCertVerified, Certificate, DistinguishedName},'}, {'line_number': 45, 'line_content': 'impl rustls::server::ClientCertVerifier for SkipClientVerification {'}, {'line_number': 55, 'line_content': ') -> Result<ClientCertVerified, rustls::Error> {'}, {'line_number': 56, 'line_content': 'Ok(rustls::server::ClientCertVerified::assertion())'}, {'line_number': 67, 'line_content': 'let (cert, priv_key) = new_self_signed_tls_certificate(identity_keypair, gossip_host)?;'}, {'line_number': 74, 'line_content': 'let mut server_tls_config = rustls::ServerConfig::builder()'}, {'line_number': 78, 'line_content': 'server_tls_config.alpn_protocols = vec![ALPN_TPU_PROTOCOL_ID.to_vec()];'}, {'line_number': 80, 'line_content': 'let mut server_config = ServerConfig::with_crypto(Arc::new(server_tls_config));'}, {'line_number': 117, 'line_content': 'TlsError(#[from] rustls::Error),'}]"
23,/Users/andrew/Documents/projects/solana/streamer/src/lib.rs,"[{'line_number': 9, 'line_content': 'pub mod tls_certificates;'}]"
24,/Users/andrew/Documents/projects/solana/streamer/src/tls_certificates.rs,"[{'line_number': 9, 'line_content': 'pub fn new_self_signed_tls_certificate('}, {'line_number': 12, 'line_content': ') -> Result<(rustls::Certificate, rustls::PrivateKey), RcgenError> {'}, {'line_number': 54, 'line_content': 'let priv_key = rustls::PrivateKey(priv_key);'}, {'line_number': 55, 'line_content': 'Ok((rustls::Certificate(cert_der), priv_key))'}, {'line_number': 58, 'line_content': 'pub fn get_pubkey_from_tls_certificate(der_cert: &rustls::Certificate) -> Option<Pubkey> {'}, {'line_number': 71, 'line_content': 'fn test_generate_tls_certificate() {'}, {'line_number': 75, 'line_content': 'new_self_signed_tls_certificate(&keypair, IpAddr::V4(Ipv4Addr::LOCALHOST))'}, {'line_number': 77, 'line_content': 'if let Some(pubkey) = get_pubkey_from_tls_certificate(&cert) {'}]"
25,/Users/andrew/Documents/projects/solana/streamer/src/nonblocking/quic.rs,"[{'line_number': 9, 'line_content': 'tls_certificates::get_pubkey_from_tls_certificate,'}, {'line_number': 259, 'line_content': '.downcast::<Vec<rustls::Certificate>>()'}, {'line_number': 263, 'line_content': '.and_then(get_pubkey_from_tls_certificate)'}, {'line_number': 1229, 'line_content': 'tls_certificates::new_self_signed_tls_certificate,'}, {'line_number': 1253, 'line_content': 'impl rustls::client::ServerCertVerifier for SkipServerVerification {'}, {'line_number': 1256, 'line_content': '_end_entity: &rustls::Certificate,'}, {'line_number': 1257, 'line_content': '_intermediates: &[rustls::Certificate],'}, {'line_number': 1258, 'line_content': '_server_name: &rustls::ServerName,'}, {'line_number': 1262, 'line_content': ') -> Result<rustls::client::ServerCertVerified, rustls::Error> {'}, {'line_number': 1263, 'line_content': 'Ok(rustls::client::ServerCertVerified::assertion())'}, {'line_number': 1269, 'line_content': 'let (cert, key) = new_self_signed_tls_certificate(keypair, ipaddr)'}, {'line_number': 1272, 'line_content': 'let mut crypto = rustls::ClientConfig::builder()'}]"
26,/Users/andrew/Documents/projects/solana/sdk/cargo-build-sbf/Cargo.toml,"[{'line_number': 19, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""rustls-tls""] }'}]"
27,/Users/andrew/Documents/projects/solana/storage-bigtable/Cargo.toml,"[{'line_number': 36, 'line_content': 'tonic = { workspace = true, features = [""tls"", ""transport""] }'}]"
28,/Users/andrew/Documents/projects/solana/storage-bigtable/src/bigtable.rs,"[{'line_number': 180, 'line_content': '.tls_config('}, {'line_number': 209, 'line_content': 'proxy_connector.set_tls(None);'}]"
29,/Users/andrew/Documents/projects/solana/turbine/Cargo.toml,"[{'line_number': 25, 'line_content': 'rustls = { workspace = true }'}]"
30,/Users/andrew/Documents/projects/solana/turbine/src/quic_endpoint.rs,"[{'line_number': 12, 'line_content': 'rustls::{Certificate, PrivateKey},'}, {'line_number': 17, 'line_content': 'quic::SkipClientVerification, tls_certificates::new_self_signed_tls_certificate,'}, {'line_number': 85, 'line_content': 'TlsError(#[from] rustls::Error),'}, {'line_number': 110, 'line_content': 'let (cert, key) = new_self_signed_tls_certificate(keypair, address)?;'}, {'line_number': 157, 'line_content': 'fn new_server_config(cert: Certificate, key: PrivateKey) -> Result<ServerConfig, rustls::Error> {'}, {'line_number': 158, 'line_content': 'let mut config = rustls::ServerConfig::builder()'}, {'line_number': 171, 'line_content': 'fn new_client_config(cert: Certificate, key: PrivateKey) -> Result<ClientConfig, rustls::Error> {'}, {'line_number': 172, 'line_content': 'let mut config = rustls::ClientConfig::builder()'}]"
31,/Users/andrew/Documents/projects/solana/rpc-client-api/Cargo.toml,"[{'line_number': 16, 'line_content': 'reqwest = { workspace = true, features = [""blocking"", ""brotli"", ""deflate"", ""gzip"", ""rustls-tls"", ""json""] }'}]"
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 303, 'line_content': 'sha3 = ""0.10.4""'}]"
1,/Users/andrew/Documents/projects/solana/zk-token-sdk/Cargo.toml,"[{'line_number': 34, 'line_content': 'sha3 = ""0.9""'}]"
2,/Users/andrew/Documents/projects/solana/zk-token-sdk/src/encryption/auth_encryption.rs,"[{'line_number': 16, 'line_content': 'sha3::{Digest, Sha3_512},'}]"
3,/Users/andrew/Documents/projects/solana/zk-token-sdk/src/encryption/pedersen.rs,"[{'line_number': 15, 'line_content': 'sha3::Sha3_512,'}]"
4,/Users/andrew/Documents/projects/solana/zk-token-sdk/src/encryption/elgamal.rs,"[{'line_number': 50, 'line_content': 'sha3::{Digest, Sha3_512},'}]"
5,/Users/andrew/Documents/projects/solana/zk-token-sdk/src/range_proof/inner_product.rs,"[{'line_number': 427, 'line_content': 'sha3::Sha3_512,'}]"
6,/Users/andrew/Documents/projects/solana/zk-token-sdk/src/range_proof/generators.rs,"[{'line_number': 7, 'line_content': 'sha3::{Sha3XofReader, Shake256},'}]"
7,/Users/andrew/Documents/projects/solana/target/release/build/oid-registry-cbdc8458b5bcd629/out/oid_db.rs,"[{'line_number': 343, 'line_content': 'self.insert(oid!(2.16.840.1.101.3.4.2.2), OidEntry::new(""sha384"", ""Secure Hash Algorithm that uses a 384 bit key (SHA384)""));'}, {'line_number': 359, 'line_content': 'self.insert(oid!(1.2.840.113549.1.1.12), OidEntry::new(""sha384WithRSAEncryption"", ""SHA384 with RSA encryption""));'}]"
8,/Users/andrew/Documents/projects/solana/target/debug/build/oid-registry-cbff4a0a3518657e/out/oid_db.rs,"[{'line_number': 343, 'line_content': 'self.insert(oid!(2.16.840.1.101.3.4.2.2), OidEntry::new(""sha384"", ""Secure Hash Algorithm that uses a 384 bit key (SHA384)""));'}, {'line_number': 359, 'line_content': 'self.insert(oid!(1.2.840.113549.1.1.12), OidEntry::new(""sha384WithRSAEncryption"", ""SHA384 with RSA encryption""));'}]"
9,/Users/andrew/Documents/projects/solana/target/debug/build/oid-registry-feb50f81c2dc56a1/out/oid_db.rs,"[{'line_number': 343, 'line_content': 'self.insert(oid!(2.16.840.1.101.3.4.2.2), OidEntry::new(""sha384"", ""Secure Hash Algorithm that uses a 384 bit key (SHA384)""));'}, {'line_number': 359, 'line_content': 'self.insert(oid!(1.2.840.113549.1.1.12), OidEntry::new(""sha384WithRSAEncryption"", ""SHA384 with RSA encryption""));'}]"
10,/Users/andrew/Documents/projects/solana/sdk/Cargo.toml,"[{'line_number': 35, 'line_content': '""sha3"",'}, {'line_number': 77, 'line_content': 'sha3 = { workspace = true, optional = true }'}]"
11,/Users/andrew/Documents/projects/solana/sdk/program/Cargo.toml,"[{'line_number': 35, 'line_content': 'sha3 = { workspace = true }'}]"
12,/Users/andrew/Documents/projects/solana/sdk/program/src/keccak.rs,"[{'line_number': 8, 'line_content': 'sha3::{Digest, Keccak256},'}, {'line_number': 51, 'line_content': '// At the time of this writing, the sha3 library is stuck on an old version'}]"
13,/Users/andrew/Documents/projects/solana/sdk/src/secp256k1_instruction.rs,"[{'line_number': 852, 'line_content': 'let mut hasher = sha3::Keccak256::new();'}, {'line_number': 911, 'line_content': 'addr.copy_from_slice(&sha3::Keccak256::digest(&pubkey.serialize()[1..])[12..]);'}, {'line_number': 999, 'line_content': 'let mut hasher = sha3::Keccak256::new();'}]"
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 215, 'line_content': 'hmac = ""0.12.1""'}]"
1,/Users/andrew/Documents/projects/solana/sdk/Cargo.toml,"[{'line_number': 56, 'line_content': 'hmac = { workspace = true }'}]"
2,/Users/andrew/Documents/projects/solana/sdk/src/signer/keypair.rs,"[{'line_number': 12, 'line_content': 'hmac::Hmac,'}]"
0,/Users/andrew/Documents/projects/solana/bloom/benches/bloom.rs,"[{'line_number': 6, 'line_content': 'fnv::FnvHasher,'}, {'line_number': 21, 'line_content': 'let mut hasher = FnvHasher::default();'}, {'line_number': 36, 'line_content': 'let mut hasher = FnvHasher::default();'}]"
1,/Users/andrew/Documents/projects/solana/bloom/src/bloom.rs,"[{'line_number': 5, 'line_content': 'fnv::FnvHasher,'}, {'line_number': 138, 'line_content': 'let mut hasher = FnvHasher::with_key(hash_index);'}]"
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 195, 'line_content': 'ed25519-dalek-bip32 = ""0.2.0""'}]"
1,/Users/andrew/Documents/projects/solana/sdk/Cargo.toml,"[{'line_number': 32, 'line_content': '""ed25519-dalek-bip32"",'}, {'line_number': 54, 'line_content': 'ed25519-dalek-bip32 = { workspace = true, optional = true }'}]"
2,/Users/andrew/Documents/projects/solana/sdk/src/signer/keypair.rs,"[{'line_number': 11, 'line_content': 'ed25519_dalek_bip32::Error as Bip32Error,'}, {'line_number': 225, 'line_content': 'bip32_derived_keypair(seed, derivation_path).map_err(|err| err.to_string().into())'}, {'line_number': 229, 'line_content': 'fn bip32_derived_keypair('}, {'line_number': 233, 'line_content': 'let extended = ed25519_dalek_bip32::ExtendedSecretKey::from_seed(seed)'}]"
3,/Users/andrew/Documents/projects/solana/clap-v3-utils/src/keypair.rs,"[{'line_number': 934, 'line_content': '/// The bip32 hierarchical derivation of an ElGamal keypair is not currently'}, {'line_number': 1005, 'line_content': '/// The bip32 hierarchical derivation of an authenticated encryption key is not'}]"
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 302, 'line_content': 'sha2 = ""0.10.8""'}]"
1,/Users/andrew/Documents/projects/solana/ledger/Cargo.toml,"[{'line_number': 39, 'line_content': 'sha2 = { workspace = true }'}]"
2,/Users/andrew/Documents/projects/solana/ledger/src/sigverify_shreds.rs,"[{'line_number': 6, 'line_content': 'sha2::{Digest, Sha512},'}]"
3,/Users/andrew/Documents/projects/solana/install/src/command.rs,"[{'line_number': 64, 'line_content': '/// Downloads a file at `url` to a temporary location.  If `expected_sha256` is'}, {'line_number': 74, 'line_content': 'expected_sha256: Option<&Hash>,'}, {'line_number': 76, 'line_content': 'fn sha256_file_digest<P: AsRef<Path>>(path: P) -> Result<Hash, Box<dyn std::error::Error>> {'}, {'line_number': 148, 'line_content': 'let temp_file_sha256 = sha256_file_digest(&temp_file)'}, {'line_number': 151, 'line_content': 'if expected_sha256.is_some() && expected_sha256 != Some(&temp_file_sha256) {'}, {'line_number': 156, 'line_content': 'Ok((temp_dir, temp_file, temp_file_sha256))'}, {'line_number': 722, 'line_content': 'let (temp_dir, temp_archive, temp_archive_sha256) = download_to_temp(download_url, None)'}, {'line_number': 727, 'line_content': 'if temp_archive_sha256 == update_manifest.download_sha256 {'}, {'line_number': 759, 'line_content': 'update_manifest.manifest.download_sha256 = temp_archive_sha256;'}, {'line_number': 970, 'line_content': 'let (updated_version, download_url_and_sha256, release_dir) = if let Some(explicit_release) ='}, {'line_number': 1018, 'line_content': 'let download_url_and_sha256 = if release_dir.exists() {'}, {'line_number': 1024, 'line_content': '(release_semver, download_url_and_sha256, release_dir)'}, {'line_number': 1032, 'line_content': 'let (_temp_dir, temp_file, _temp_archive_sha256) ='}, {'line_number': 1126, 'line_content': 'let release_dir = config.release_dir(&update_manifest.download_sha256.to_string());'}, {'line_number': 1129, 'line_content': 'let archive_sha256 = Some(update_manifest.download_sha256);'}, {'line_number': 1132, 'line_content': 'Some((download_url, archive_sha256)),'}, {'line_number': 1146, 'line_content': 'if let Some((download_url, archive_sha256)) = download_url_and_sha256 {'}, {'line_number': 1147, 'line_content': 'let (_temp_dir, temp_archive, _temp_archive_sha256) ='}, {'line_number': 1148, 'line_content': 'download_to_temp(&download_url, archive_sha256.as_ref())'}]"
4,/Users/andrew/Documents/projects/solana/install/src/update_manifest.rs,"[{'line_number': 17, 'line_content': 'pub download_sha256: Hash, // SHA256 digest of the release tar.bz2 file'}]"
5,/Users/andrew/Documents/projects/solana/target/release/build/oid-registry-cbdc8458b5bcd629/out/oid_db.rs,"[{'line_number': 342, 'line_content': 'self.insert(oid!(2.16.840.1.101.3.4.2.1), OidEntry::new(""sha256"", ""Secure Hash Algorithm that uses a 256 bit key (SHA256)""));'}, {'line_number': 358, 'line_content': 'self.insert(oid!(1.2.840.113549.1.1.11), OidEntry::new(""sha256WithRSAEncryption"", ""SHA256 with RSA encryption""));'}, {'line_number': 361, 'line_content': 'self.insert(oid!(1.2.840.113549.1.1.14), OidEntry::new(""sha224WithRSAEncryption"", ""SHA224 with RSA encryption""));'}]"
6,/Users/andrew/Documents/projects/solana/target/debug/build/oid-registry-cbff4a0a3518657e/out/oid_db.rs,"[{'line_number': 342, 'line_content': 'self.insert(oid!(2.16.840.1.101.3.4.2.1), OidEntry::new(""sha256"", ""Secure Hash Algorithm that uses a 256 bit key (SHA256)""));'}, {'line_number': 358, 'line_content': 'self.insert(oid!(1.2.840.113549.1.1.11), OidEntry::new(""sha256WithRSAEncryption"", ""SHA256 with RSA encryption""));'}, {'line_number': 361, 'line_content': 'self.insert(oid!(1.2.840.113549.1.1.14), OidEntry::new(""sha224WithRSAEncryption"", ""SHA224 with RSA encryption""));'}]"
7,/Users/andrew/Documents/projects/solana/target/debug/build/oid-registry-feb50f81c2dc56a1/out/oid_db.rs,"[{'line_number': 342, 'line_content': 'self.insert(oid!(2.16.840.1.101.3.4.2.1), OidEntry::new(""sha256"", ""Secure Hash Algorithm that uses a 256 bit key (SHA256)""));'}, {'line_number': 358, 'line_content': 'self.insert(oid!(1.2.840.113549.1.1.11), OidEntry::new(""sha256WithRSAEncryption"", ""SHA256 with RSA encryption""));'}, {'line_number': 361, 'line_content': 'self.insert(oid!(1.2.840.113549.1.1.14), OidEntry::new(""sha224WithRSAEncryption"", ""SHA224 with RSA encryption""));'}]"
8,/Users/andrew/Documents/projects/solana/program-runtime/src/compute_budget.rs,"[{'line_number': 39, 'line_content': 'pub sha256_base_cost: u64,'}, {'line_number': 41, 'line_content': 'pub sha256_byte_cost: u64,'}, {'line_number': 43, 'line_content': 'pub sha256_max_slices: u64,'}, {'line_number': 140, 'line_content': 'sha256_base_cost: 85,'}, {'line_number': 141, 'line_content': 'sha256_byte_cost: 1,'}, {'line_number': 142, 'line_content': 'sha256_max_slices: 20_000,'}]"
9,/Users/andrew/Documents/projects/solana/programs/bpf_loader/src/syscalls/mod.rs,"[{'line_number': 163, 'line_content': 'compute_budget.sha256_base_cost'}, {'line_number': 166, 'line_content': 'compute_budget.sha256_byte_cost'}, {'line_number': 169, 'line_content': 'compute_budget.sha256_max_slices'}, {'line_number': 190, 'line_content': 'compute_budget.sha256_base_cost'}, {'line_number': 193, 'line_content': 'compute_budget.sha256_byte_cost'}, {'line_number': 196, 'line_content': 'compute_budget.sha256_max_slices'}, {'line_number': 217, 'line_content': 'compute_budget.sha256_base_cost'}, {'line_number': 220, 'line_content': 'compute_budget.sha256_byte_cost'}, {'line_number': 223, 'line_content': 'compute_budget.sha256_max_slices'}, {'line_number': 332, 'line_content': 'result.register_function_hashed(*b""sol_sha256"", SyscallHash::vm::<Sha256Hasher>)?;'}, {'line_number': 1541, 'line_content': '.saturating_add(budget.sha256_base_cost)'}, {'line_number': 2521, 'line_content': 'fn test_syscall_sha256() {'}, {'line_number': 2554, 'line_content': '(invoke_context.get_compute_budget().sha256_base_cost'}, {'line_number': 2558, 'line_content': '.sha256_byte_cost'}]"
10,/Users/andrew/Documents/projects/solana/programs/sbf/rust/sha/src/lib.rs,"[{'line_number': 6, 'line_content': 'fn test_sha256_hasher() {'}, {'line_number': 35, 'line_content': 'test_sha256_hasher();'}, {'line_number': 51, 'line_content': 'test_sha256_hasher();'}]"
11,/Users/andrew/Documents/projects/solana/sdk/Cargo.toml,"[{'line_number': 76, 'line_content': 'sha2 = { workspace = true }'}]"
12,/Users/andrew/Documents/projects/solana/sdk/program/Cargo.toml,"[{'line_number': 34, 'line_content': 'sha2 = { workspace = true }'}]"
13,/Users/andrew/Documents/projects/solana/sdk/program/src/hash.rs,"[{'line_number': 10, 'line_content': 'sha2::{Digest, Sha256},'}, {'line_number': 164, 'line_content': 'crate::syscalls::sol_sha256('}]"
14,/Users/andrew/Documents/projects/solana/sdk/program/src/syscalls/definitions.rs,"[{'line_number': 45, 'line_content': 'define_syscall!(fn sol_sha256(vals: *const u8, val_len: u64, hash_result: *mut u8) -> u64);'}]"
15,/Users/andrew/Documents/projects/solana/sdk/src/signer/keypair.rs,"[{'line_number': 252, 'line_content': 'pbkdf2::pbkdf2::<Hmac<sha2::Sha512>>('}]"
16,/Users/andrew/Documents/projects/solana/frozen-abi/Cargo.toml,"[{'line_number': 20, 'line_content': 'sha2 = { workspace = true }'}]"
17,/Users/andrew/Documents/projects/solana/frozen-abi/src/hash.rs,"[{'line_number': 2, 'line_content': 'sha2::{Digest, Sha256},'}, {'line_number': 20, 'line_content': '// At the time of this writing, the sha2 library is stuck on an old version'}]"
18,/Users/andrew/Documents/projects/solana/cargo-registry/Cargo.toml,"[{'line_number': 20, 'line_content': 'sha2 = { workspace = true }'}]"
19,/Users/andrew/Documents/projects/solana/cargo-registry/src/crate_handler.rs,"[{'line_number': 14, 'line_content': 'sha2::{Digest, Sha256},'}]"
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 158, 'line_content': 'blake3 = ""1.5.0""'}]"
1,/Users/andrew/Documents/projects/solana/core/src/banking_stage/immutable_deserialized_packet.rs,"[{'line_number': 106, 'line_content': '// This function deserializes packets into transactions, computes the blake3 hash of transaction'}]"
2,/Users/andrew/Documents/projects/solana/runtime/Cargo.toml,"[{'line_number': 17, 'line_content': 'blake3 = { workspace = true }'}]"
3,/Users/andrew/Documents/projects/solana/programs/bpf_loader/src/syscalls/mod.rs,"[{'line_number': 32, 'line_content': 'blake3, bpf_loader, bpf_loader_deprecated, bpf_loader_upgradeable,'}, {'line_number': 37, 'line_content': 'self, blake3_syscall_enabled, curve25519_syscall_enabled,'}, {'line_number': 143, 'line_content': 'pub struct Blake3Hasher(blake3::Hasher);'}, {'line_number': 175, 'line_content': 'type Output = blake3::Hash;'}, {'line_number': 178, 'line_content': 'Blake3Hasher(blake3::Hasher::default())'}, {'line_number': 270, 'line_content': 'let blake3_syscall_enabled = feature_set.is_active(&blake3_syscall_enabled::id());'}, {'line_number': 343, 'line_content': 'blake3_syscall_enabled,'}, {'line_number': 344, 'line_content': '*b""sol_blake3"",'}]"
4,/Users/andrew/Documents/projects/solana/programs/sbf/Cargo.toml,"[{'line_number': 13, 'line_content': 'blake3 = ""1.0.0""'}]"
5,/Users/andrew/Documents/projects/solana/programs/sbf/rust/sha/Cargo.toml,"[{'line_number': 13, 'line_content': 'blake3 = { workspace = true }'}]"
6,/Users/andrew/Documents/projects/solana/programs/sbf/rust/sha/src/lib.rs,"[{'line_number': 22, 'line_content': 'fn test_blake3_hasher() {'}, {'line_number': 23, 'line_content': 'use solana_program::blake3::hashv;'}, {'line_number': 27, 'line_content': 'let hash = blake3::hash(&[v0, v1].concat());'}, {'line_number': 37, 'line_content': 'test_blake3_hasher();'}, {'line_number': 53, 'line_content': 'test_blake3_hasher();'}]"
7,/Users/andrew/Documents/projects/solana/sdk/program/Cargo.toml,"[{'line_number': 16, 'line_content': 'blake3 = { workspace = true, features = [""digest"", ""traits-preview""] }'}]"
8,/Users/andrew/Documents/projects/solana/sdk/program/src/lib.rs,"[{'line_number': 478, 'line_content': 'pub mod blake3;'}]"
9,/Users/andrew/Documents/projects/solana/sdk/program/src/blake3.rs,"[{'line_number': 1, 'line_content': '//! Hashing with the [blake3] hash function.'}, {'line_number': 3, 'line_content': '//! [blake3]: https://github.com/BLAKE3-team/BLAKE3'}, {'line_number': 17, 'line_content': '/// A blake3 hash.'}, {'line_number': 40, 'line_content': 'hasher: blake3::Hasher,'}, {'line_number': 143, 'line_content': 'crate::syscalls::sol_blake3('}]"
10,/Users/andrew/Documents/projects/solana/sdk/program/src/hash.rs,"[{'line_number': 23, 'line_content': '/// a [SHA-256] hash, but may instead contain a [blake3] hash, as created by the'}, {'line_number': 24, 'line_content': '/// [`blake3`] module (and used in [`Message::hash`]).'}, {'line_number': 27, 'line_content': '/// [blake3]: https://github.com/BLAKE3-team/BLAKE3'}, {'line_number': 28, 'line_content': '/// [`blake3`]: crate::blake3'}]"
11,/Users/andrew/Documents/projects/solana/sdk/program/src/message/legacy.rs,"[{'line_number': 470, 'line_content': ""/// Compute the blake3 hash of this transaction's message.""}, {'line_number': 477, 'line_content': '/// Compute the blake3 hash of a raw transaction message.'}, {'line_number': 480, 'line_content': 'use blake3::traits::digest::Digest;'}, {'line_number': 481, 'line_content': 'let mut hasher = blake3::Hasher::new();'}]"
12,/Users/andrew/Documents/projects/solana/sdk/program/src/message/versions/mod.rs,"[{'line_number': 139, 'line_content': ""/// Compute the blake3 hash of this transaction's message""}, {'line_number': 145, 'line_content': '/// Compute the blake3 hash of a raw transaction message'}, {'line_number': 147, 'line_content': 'use blake3::traits::digest::Digest;'}, {'line_number': 148, 'line_content': 'let mut hasher = blake3::Hasher::new();'}]"
13,/Users/andrew/Documents/projects/solana/sdk/program/src/syscalls/definitions.rs,"[{'line_number': 48, 'line_content': 'define_syscall!(fn sol_blake3(vals: *const u8, val_len: u64, hash_result: *mut u8) -> u64);'}]"
14,/Users/andrew/Documents/projects/solana/sdk/src/lib.rs,"[{'line_number': 48, 'line_content': 'account_info, address_lookup_table, alt_bn128, big_mod_exp, blake3, borsh, borsh0_10, borsh0_9,'}]"
15,/Users/andrew/Documents/projects/solana/sdk/src/feature_set.rs,"[{'line_number': 97, 'line_content': 'pub mod blake3_syscall_enabled {'}, {'line_number': 810, 'line_content': '(blake3_syscall_enabled::id(), ""blake3 syscall""),'}]"
16,/Users/andrew/Documents/projects/solana/accounts-db/Cargo.toml,"[{'line_number': 15, 'line_content': 'blake3 = { workspace = true }'}]"
17,/Users/andrew/Documents/projects/solana/accounts-db/src/accounts_hash.rs,"[{'line_number': 1175, 'line_content': 'let hash = blake3::hash(bytemuck::bytes_of(&item.pubkey));'}]"
18,/Users/andrew/Documents/projects/solana/accounts-db/src/accounts_db.rs,"[{'line_number': 76, 'line_content': 'blake3::traits::digest::Digest,'}, {'line_number': 6114, 'line_content': 'let mut hasher = blake3::Hasher::new();'}, {'line_number': 18200, 'line_content': 'let hash = blake3::hash(bytemuck::bytes_of(pubkey));'}]"
0,/Users/andrew/Documents/projects/solana/Cargo.toml,"[{'line_number': 240, 'line_content': 'libsecp256k1 = ""0.6.0""'}]"
1,/Users/andrew/Documents/projects/solana/cost-model/src/block_cost_limits.rs,"[{'line_number': 7, 'line_content': 'compute_budget, ed25519_program, loader_v4, pubkey::Pubkey, secp256k1_program,'}, {'line_number': 27, 'line_content': '/// Number of compute units for one secp256k1 signature verification.'}, {'line_number': 50, 'line_content': '(secp256k1_program::id(), 0),'}]"
2,/Users/andrew/Documents/projects/solana/cost-model/src/cost_tracker.rs,"[{'line_number': 62, 'line_content': 'secp256k1_instruction_signature_count: u64,'}, {'line_number': 84, 'line_content': 'secp256k1_instruction_signature_count: 0,'}, {'line_number': 168, 'line_content': '""secp256k1_instruction_signature_count"",'}, {'line_number': 169, 'line_content': 'self.secp256k1_instruction_signature_count,'}, {'line_number': 242, 'line_content': 'self.secp256k1_instruction_signature_count,'}, {'line_number': 243, 'line_content': 'tx_cost.num_secp256k1_instruction_signatures()'}, {'line_number': 261, 'line_content': 'self.secp256k1_instruction_signature_count = self'}, {'line_number': 262, 'line_content': '.secp256k1_instruction_signature_count'}, {'line_number': 263, 'line_content': '.saturating_sub(tx_cost.num_secp256k1_instruction_signatures());'}]"
3,/Users/andrew/Documents/projects/solana/cost-model/src/transaction_cost.rs,"[{'line_number': 98, 'line_content': 'pub fn num_secp256k1_instruction_signatures(&self) -> u64 {'}, {'line_number': 101, 'line_content': 'Self::Transaction(usage_cost) => usage_cost.num_secp256k1_instruction_signatures,'}, {'line_number': 127, 'line_content': 'pub num_secp256k1_instruction_signatures: u64,'}, {'line_number': 143, 'line_content': 'num_secp256k1_instruction_signatures: 0u64,'}, {'line_number': 164, 'line_content': '&& self.num_secp256k1_instruction_signatures'}, {'line_number': 165, 'line_content': '== other.num_secp256k1_instruction_signatures'}]"
4,/Users/andrew/Documents/projects/solana/cost-model/src/cost_model.rs,"[{'line_number': 59, 'line_content': 'tx_cost.num_secp256k1_instruction_signatures ='}, {'line_number': 60, 'line_content': 'signatures_count_detail.num_secp256k1_instruction_signatures();'}, {'line_number': 68, 'line_content': '.num_secp256k1_instruction_signatures()'}]"
5,/Users/andrew/Documents/projects/solana/core/src/banking_stage/packet_filter.rs,"[{'line_number': 4, 'line_content': 'solana_sdk::{ed25519_program, saturating_add_assign, secp256k1_program},'}, {'line_number': 42, 'line_content': 'if secp256k1_program::check_id(program_id) || ed25519_program::check_id(program_id) {'}]"
6,/Users/andrew/Documents/projects/solana/program-runtime/Cargo.toml,"[{'line_number': 35, 'line_content': 'libsecp256k1 = { workspace = true }'}]"
7,/Users/andrew/Documents/projects/solana/program-runtime/src/compute_budget.rs,"[{'line_number': 56, 'line_content': '/// Number of compute units consumed to call secp256k1_recover'}, {'line_number': 57, 'line_content': 'pub secp256k1_recover_cost: u64,'}, {'line_number': 149, 'line_content': 'secp256k1_recover_cost: 25_000,'}]"
8,/Users/andrew/Documents/projects/solana/program-runtime/src/message_processor.rs,"[{'line_number': 187, 'line_content': 'secp256k1_instruction::new_secp256k1_instruction,'}, {'line_number': 188, 'line_content': 'secp256k1_program,'}, {'line_number': 621, 'line_content': 'let mut secp256k1_account = AccountSharedData::new(1, 0, &native_loader::id());'}, {'line_number': 622, 'line_content': 'secp256k1_account.set_executable(true);'}, {'line_number': 626, 'line_content': '(secp256k1_program::id(), secp256k1_account),'}, {'line_number': 631, 'line_content': '// Since libsecp256k1 is still using the old version of rand, this test'}, {'line_number': 633, 'line_content': '// https://docs.rs/libsecp256k1/latest/src/libsecp256k1/lib.rs.html#430'}, {'line_number': 638, 'line_content': 'let mut ret = [0u8; libsecp256k1::util::SECRET_KEY_SIZE];'}, {'line_number': 640, 'line_content': 'if let Ok(key) = libsecp256k1::SecretKey::parse(&ret) {'}, {'line_number': 647, 'line_content': 'new_secp256k1_instruction(&secret_key, b""hello""),'}]"
9,/Users/andrew/Documents/projects/solana/runtime/Cargo.toml,"[{'line_number': 89, 'line_content': 'libsecp256k1 = { workspace = true }'}]"
10,/Users/andrew/Documents/projects/solana/runtime/src/bank/tests.rs,"[{'line_number': 88, 'line_content': 'secp256k1_program,'}, {'line_number': 9992, 'line_content': '// libsecp256k1'}, {'line_number': 9993, 'line_content': '// Since libsecp256k1 is still using the old version of rand, this test'}, {'line_number': 9995, 'line_content': '// https://docs.rs/libsecp256k1/latest/src/libsecp256k1/lib.rs.html#430'}, {'line_number': 10000, 'line_content': 'let mut ret = [0u8; libsecp256k1::util::SECRET_KEY_SIZE];'}, {'line_number': 10002, 'line_content': 'if let Ok(key) = libsecp256k1::SecretKey::parse(&ret) {'}, {'line_number': 10009, 'line_content': 'solana_sdk::secp256k1_instruction::new_secp256k1_instruction(&secp_privkey, message_arr);'}, {'line_number': 10212, 'line_content': 'fn test_calculate_fee_secp256k1() {'}, {'line_number': 10222, 'line_content': 'program_id: secp256k1_program::id(),'}, {'line_number': 10227, 'line_content': 'program_id: secp256k1_program::id(),'}]"
11,/Users/andrew/Documents/projects/solana/programs/bpf_loader/Cargo.toml,"[{'line_number': 15, 'line_content': 'libsecp256k1 = { workspace = true }'}]"
12,/Users/andrew/Documents/projects/solana/programs/bpf_loader/src/syscalls/mod.rs,"[{'line_number': 51, 'line_content': 'secp256k1_recover::{'}, {'line_number': 338, 'line_content': 'result.register_function_hashed(*b""sol_secp256k1_recover"", SyscallSecp256k1Recover::vm)?;'}, {'line_number': 809, 'line_content': '/// secp256k1_recover'}, {'line_number': 820, 'line_content': 'let cost = invoke_context.get_compute_budget().secp256k1_recover_cost;'}, {'line_number': 835, 'line_content': 'let secp256k1_recover_result = translate_slice_mut::<u8>('}, {'line_number': 842, 'line_content': 'let Ok(message) = libsecp256k1::Message::parse_slice(hash) else {'}, {'line_number': 848, 'line_content': 'let Ok(recovery_id) = libsecp256k1::RecoveryId::parse(adjusted_recover_id_val) else {'}, {'line_number': 851, 'line_content': 'let Ok(signature) = libsecp256k1::Signature::parse_standard_slice(signature) else {'}, {'line_number': 855, 'line_content': 'let public_key = match libsecp256k1::recover(&message, &signature, &recovery_id) {'}, {'line_number': 862, 'line_content': 'secp256k1_recover_result.copy_from_slice(&public_key[1..65]);'}]"
13,/Users/andrew/Documents/projects/solana/programs/sbf/Cargo.toml,"[{'line_number': 18, 'line_content': 'libsecp256k1 = { version = ""0.7.0"", default-features = false }'}, {'line_number': 154, 'line_content': '""rust/secp256k1_recover"",'}]"
14,/Users/andrew/Documents/projects/solana/programs/sbf/build.rs,"[{'line_number': 104, 'line_content': '""secp256k1_recover"",'}]"
15,/Users/andrew/Documents/projects/solana/programs/sbf/rust/secp256k1_recover/Cargo.toml,"[{'line_number': 2, 'line_content': 'name = ""solana-sbf-rust-secp256k1-recover""'}, {'line_number': 3, 'line_content': 'documentation = ""https://docs.rs/solana-sbf-rust-secp256k1-recover""'}, {'line_number': 13, 'line_content': 'libsecp256k1 = { workspace = true }'}]"
16,/Users/andrew/Documents/projects/solana/programs/sbf/rust/secp256k1_recover/src/lib.rs,"[{'line_number': 6, 'line_content': 'custom_heap_default, custom_panic_default, msg, secp256k1_recover::secp256k1_recover,'}, {'line_number': 9, 'line_content': 'fn test_secp256k1_recover() {'}, {'line_number': 32, 'line_content': 'let public_key = secp256k1_recover(&hash[..], recovery_id, &signature[..]).unwrap();'}, {'line_number': 36, 'line_content': '/// secp256k1_recover allows malleable signatures'}, {'line_number': 37, 'line_content': 'fn test_secp256k1_recover_malleability() {'}, {'line_number': 61, 'line_content': 'let signature = libsecp256k1::Signature::parse_standard_slice(&signature_bytes).unwrap();'}, {'line_number': 66, 'line_content': 'let alt_recovery_id = libsecp256k1::RecoveryId::parse(recovery_id ^ 1).unwrap();'}, {'line_number': 72, 'line_content': 'secp256k1_recover(&message_hash.0, recovery_id, &signature_bytes[..]).unwrap();'}, {'line_number': 76, 'line_content': 'secp256k1_recover(&message_hash.0, alt_recovery_id, &alt_signature_bytes[..]).unwrap();'}, {'line_number': 82, 'line_content': 'msg!(""secp256k1_recover"");'}, {'line_number': 84, 'line_content': 'test_secp256k1_recover();'}, {'line_number': 85, 'line_content': 'test_secp256k1_recover_malleability();'}]"
17,/Users/andrew/Documents/projects/solana/programs/sbf/tests/programs.rs,"[{'line_number': 267, 'line_content': '(""secp256k1_recover"", true),'}, {'line_number': 294, 'line_content': '(""solana_sbf_rust_secp256k1_recover"", true),'}, {'line_number': 1368, 'line_content': '(""secp256k1_recover"", 25383),'}, {'line_number': 1389, 'line_content': '(""solana_sbf_rust_secp256k1_recover"", 91185),'}]"
18,/Users/andrew/Documents/projects/solana/sdk/Cargo.toml,"[{'line_number': 34, 'line_content': '""libsecp256k1"",'}, {'line_number': 59, 'line_content': 'libsecp256k1 = { workspace = true, optional = true }'}]"
19,/Users/andrew/Documents/projects/solana/sdk/program/Cargo.toml,"[{'line_number': 60, 'line_content': 'libsecp256k1 = { workspace = true }'}]"
20,/Users/andrew/Documents/projects/solana/sdk/program/src/lib.rs,"[{'line_number': 442, 'line_content': '//! - __secp256k1 Program__: Verifies secp256k1 public key recovery operations.'}, {'line_number': 443, 'line_content': '//!   - ID: [`solana_program::secp256k1_program`]'}, {'line_number': 444, 'line_content': '//!   - Instruction: [`solana_sdk::secp256k1_instruction`](https://docs.rs/solana-sdk/latest/solana_sdk/secp256k1_instruction/index.html)'}, {'line_number': 522, 'line_content': 'pub mod secp256k1_program;'}, {'line_number': 523, 'line_content': 'pub mod secp256k1_recover;'}, {'line_number': 569, 'line_content': 'config, ed25519_program, feature, incinerator, loader_v4, secp256k1_program,'}, {'line_number': 579, 'line_content': 'secp256k1_program::id(),'}]"
21,/Users/andrew/Documents/projects/solana/sdk/program/src/secp256k1_recover.rs,"[{'line_number': 1, 'line_content': '//! Public key recovery from [secp256k1] ECDSA signatures.'}, {'line_number': 3, 'line_content': '//! [secp256k1]: https://en.bitcoin.it/wiki/Secp256k1'}, {'line_number': 9, 'line_content': '//! The [`secp256k1_recover`] syscall allows a secp256k1 public key that has'}, {'line_number': 14, 'line_content': '//! Use cases for `secp256k1_recover` include:'}, {'line_number': 17, 'line_content': '//! - Performing secp256k1 public key recovery generally.'}, {'line_number': 18, 'line_content': '//! - Verifying a single secp256k1 signature.'}, {'line_number': 20, 'line_content': '//! While `secp256k1_recover` can be used to verify secp256k1 signatures, Solana'}, {'line_number': 21, 'line_content': '//! also provides the [secp256k1 program][sp], which is more flexible, has lower CPU'}, {'line_number': 24, 'line_content': '//! [sp]: crate::secp256k1_program'}, {'line_number': 35, 'line_content': '#[error(""The hash provided to a secp256k1_recover is invalid"")]'}, {'line_number': 37, 'line_content': '#[error(""The recovery_id provided to a secp256k1_recover is invalid"")]'}, {'line_number': 39, 'line_content': '#[error(""The signature provided to a secp256k1_recover is invalid"")]'}, {'line_number': 97, 'line_content': '/// Recover the public key from a [secp256k1] ECDSA signature and'}, {'line_number': 100, 'line_content': '/// [secp256k1]: https://en.bitcoin.it/wiki/Secp256k1'}, {'line_number': 126, 'line_content': '/// 64-byte secp256k1 public key. This public key corresponds to the secret key'}, {'line_number': 130, 'line_content': '/// While `secp256k1_recover` can be used to verify secp256k1 signatures by'}, {'line_number': 132, 'line_content': '/// the [secp256k1 program][sp], which is more flexible, has lower CPU cost, and'}, {'line_number': 135, 'line_content': '/// [sp]: crate::secp256k1_program'}, {'line_number': 137, 'line_content': '/// The `secp256k1_recover` syscall is implemented with the [`libsecp256k1`]'}, {'line_number': 140, 'line_content': '/// [`libsecp256k1`]: https://docs.rs/libsecp256k1/latest/libsecp256k1'}, {'line_number': 162, 'line_content': '/// **The solana `secp256k1_recover` function does not prevent signature'}, {'line_number': 163, 'line_content': '/// malleability**. This is in contrast to the Bitcoin secp256k1 library, which'}, {'line_number': 168, 'line_content': '/// To prevent signature malleability, it is common for secp256k1 signature'}, {'line_number': 185, 'line_content': '/// let signature = libsecp256k1::Signature::parse_standard_slice(&signature_bytes)'}, {'line_number': 194, 'line_content': '/// This has the downside that the program must link to the [`libsecp256k1`]'}, {'line_number': 195, 'line_content': '/// crate and parse the signature just for this check. Note that `libsecp256k1`'}, {'line_number': 198, 'line_content': '/// [`libsecp256k1`]: https://docs.rs/libsecp256k1/latest/libsecp256k1'}, {'line_number': 201, 'line_content': '/// prevention in secp256k1, refer to comments in [`secp256k1.h`] in the Bitcoin'}, {'line_number': 202, 'line_content': '/// Core secp256k1 library, the documentation of the [OpenZeppelin `recover`'}, {'line_number': 206, 'line_content': '/// [`secp256k1.h`]: https://github.com/bitcoin-core/secp256k1/blob/44c2452fd387f7ca604ab42d73746e7d3a44d8a2/include/secp256k1.h'}, {'line_number': 248, 'line_content': '/// signature with the `secp256k1_recover` syscall. It has three parts: a Solana'}, {'line_number': 266, 'line_content': '/// The Solana program. Note that it uses `libsecp256k1` version 0.7.0 to parse'}, {'line_number': 267, 'line_content': '/// the secp256k1 signature to prevent malleability.'}, {'line_number': 274, 'line_content': '///     secp256k1_recover::secp256k1_recover,'}, {'line_number': 277, 'line_content': '/// /// The key we expect to sign secp256k1 messages,'}, {'line_number': 278, 'line_content': '/// /// as serialized by `libsecp256k1::PublicKey::serialize`.'}, {'line_number': 291, 'line_content': '/// pub fn process_secp256k1_recover('}, {'line_number': 294, 'line_content': '///     // The secp256k1 recovery operation accepts a cryptographically-hashed'}, {'line_number': 298, 'line_content': '///     // This means that the code calling `secp256k1_recover` must perform the hash'}, {'line_number': 310, 'line_content': '///         let signature = libsecp256k1::Signature::parse_standard_slice(&instruction.signature)'}, {'line_number': 319, 'line_content': '///     let recovered_pubkey = secp256k1_recover('}, {'line_number': 328, 'line_content': '///     // Here we are checking the secp256k1 pubkey against a known authorized pubkey.'}, {'line_number': 360, 'line_content': '/// pub fn demo_secp256k1_recover('}, {'line_number': 362, 'line_content': '///     secp256k1_secret_key: &libsecp256k1::SecretKey,'}, {'line_number': 373, 'line_content': '///     let secp_message = libsecp256k1::Message::parse(&message_hash.0);'}, {'line_number': 374, 'line_content': '///     let (signature, recovery_id) = libsecp256k1::sign(&secp_message, &secp256k1_secret_key);'}, {'line_number': 402, 'line_content': 'pub fn secp256k1_recover('}, {'line_number': 411, 'line_content': 'crate::syscalls::sol_secp256k1_recover('}, {'line_number': 427, 'line_content': 'let message = libsecp256k1::Message::parse_slice(hash)'}, {'line_number': 429, 'line_content': 'let recovery_id = libsecp256k1::RecoveryId::parse(recovery_id)'}, {'line_number': 431, 'line_content': 'let signature = libsecp256k1::Signature::parse_standard_slice(signature)'}, {'line_number': 433, 'line_content': 'let secp256k1_key = libsecp256k1::recover(&message, &signature, &recovery_id)'}, {'line_number': 435, 'line_content': 'Ok(Secp256k1Pubkey::new(&secp256k1_key.serialize()[1..65]))'}]"
22,/Users/andrew/Documents/projects/solana/sdk/program/src/fee_calculator.rs,"[{'line_number': 5, 'line_content': 'crate::{clock::DEFAULT_MS_PER_SLOT, ed25519_program, message::Message, secp256k1_program},'}, {'line_number': 37, 'line_content': 'if (secp256k1_program::check_id(&id) || ed25519_program::check_id(&id))'}, {'line_number': 231, 'line_content': 'fn test_fee_calculator_calculate_fee_secp256k1() {'}, {'line_number': 237, 'line_content': 'program_id: crate::secp256k1_program::id(),'}, {'line_number': 242, 'line_content': 'program_id: crate::secp256k1_program::id(),'}]"
23,/Users/andrew/Documents/projects/solana/sdk/program/src/secp256k1_program.rs,"[{'line_number': 1, 'line_content': '//! The [secp256k1 native program][np].'}, {'line_number': 3, 'line_content': '//! [np]: https://docs.solanalabs.com/runtime/programs#secp256k1-program'}, {'line_number': 5, 'line_content': '//! Constructors for secp256k1 program instructions, and documentation on the'}, {'line_number': 6, 'line_content': ""//! program's usage can be found in [`solana_sdk::secp256k1_instruction`].""}, {'line_number': 8, 'line_content': '//! [`solana_sdk::secp256k1_instruction`]: https://docs.rs/solana-sdk/latest/solana_sdk/secp256k1_instruction/index.html'}]"
24,/Users/andrew/Documents/projects/solana/sdk/program/src/message/sanitized.rs,"[{'line_number': 16, 'line_content': 'secp256k1_program,'}, {'line_number': 370, 'line_content': 'if secp256k1_program::check_id(program_id) {'}, {'line_number': 372, 'line_content': 'transaction_signature_details.num_secp256k1_instruction_signatures ='}, {'line_number': 374, 'line_content': '.num_secp256k1_instruction_signatures'}, {'line_number': 396, 'line_content': 'num_secp256k1_instruction_signatures: u64,'}, {'line_number': 404, 'line_content': '.saturating_add(self.num_secp256k1_instruction_signatures)'}, {'line_number': 413, 'line_content': '/// return the number of secp256k1 instruction signatures'}, {'line_number': 414, 'line_content': 'pub fn num_secp256k1_instruction_signatures(&self) -> u64 {'}, {'line_number': 415, 'line_content': 'self.num_secp256k1_instruction_signatures'}, {'line_number': 624, 'line_content': 'let mock_secp256k1_instr = CompiledInstruction::new(3, &[1u8; 10], vec![]);'}, {'line_number': 635, 'line_content': 'secp256k1_program::id(),'}, {'line_number': 641, 'line_content': 'mock_secp256k1_instr.clone(),'}, {'line_number': 643, 'line_content': 'mock_secp256k1_instr,'}, {'line_number': 651, 'line_content': '// expect 2 secp256k1 instruction signatures - 1 for each mock_secp2561k1_instr'}, {'line_number': 652, 'line_content': 'assert_eq!(2, signature_details.num_secp256k1_instruction_signatures);'}]"
25,/Users/andrew/Documents/projects/solana/sdk/program/src/sysvar/instructions.rs,"[{'line_number': 6, 'line_content': '//! native programs like the [secp256k1] and [ed25519] programs.'}, {'line_number': 9, 'line_content': '//! [secp256k1]: crate::secp256k1_program'}, {'line_number': 26, 'line_content': '//! documentation for [`secp256k1_instruction`] in the `solana-sdk` crate.'}, {'line_number': 28, 'line_content': '//! [`secp256k1_instruction`]: https://docs.rs/solana-sdk/latest/solana_sdk/secp256k1_instruction/index.html'}]"
26,/Users/andrew/Documents/projects/solana/sdk/program/src/syscalls/definitions.rs,"[{'line_number': 47, 'line_content': 'define_syscall!(fn sol_secp256k1_recover(hash: *const u8, recovery_id: u64, signature: *const u8, result: *mut u8) -> u64);'}]"
27,/Users/andrew/Documents/projects/solana/sdk/src/lib.rs,"[{'line_number': 55, 'line_content': 'program_pack, rent, sanitize, sdk_ids, secp256k1_program, secp256k1_recover, serde_varint,'}, {'line_number': 97, 'line_content': 'pub mod secp256k1_instruction;'}]"
28,/Users/andrew/Documents/projects/solana/sdk/src/secp256k1_instruction.rs,"[{'line_number': 1, 'line_content': '//! Instructions for the [secp256k1 native program][np].'}, {'line_number': 3, 'line_content': '//! [np]: https://docs.solanalabs.com/runtime/programs#secp256k1-program'}, {'line_number': 9, 'line_content': '//! The secp26k1 native program peforms flexible verification of [secp256k1]'}, {'line_number': 13, 'line_content': '//! the same transaction as the secp256k1 instruction.'}, {'line_number': 15, 'line_content': '//! The secp256k1 native program ID is located in the [`secp256k1_program`] module.'}, {'line_number': 19, 'line_content': '//! hashes of secp256k1 public keys, and internally is implemented using the'}, {'line_number': 20, 'line_content': '//! secp256k1 key recovery algorithm. Ethereum address can be created for'}, {'line_number': 21, 'line_content': '//! secp256k1 public keys with the [`construct_eth_pubkey`] function.'}, {'line_number': 26, 'line_content': '//! [`ecrecover`] precompile. For that Solana provides the [`secp256k1_recover`]'}, {'line_number': 29, 'line_content': '//! [secp256k1]: https://en.bitcoin.it/wiki/Secp256k1'}, {'line_number': 30, 'line_content': '//! [`secp256k1_program`]: solana_program::secp256k1_program'}, {'line_number': 31, 'line_content': '//! [`secp256k1_recover`]: solana_program::secp256k1_recover'}, {'line_number': 34, 'line_content': '//! Use cases for the secp256k1 instruction include:'}, {'line_number': 38, 'line_content': '//! - Verifying arbitrary secp256k1 signatures.'}, {'line_number': 43, 'line_content': '//! The [`new_secp256k1_instruction`] function is suitable for building a'}, {'line_number': 44, 'line_content': '//! secp256k1 program instruction for basic use cases were a single message must'}, {'line_number': 46, 'line_content': '//! Ethereum-integration use cases, construction of the secp256k1 instruction'}, {'line_number': 51, 'line_content': '//! Transactions that uses the secp256k1 native program will typically include'}, {'line_number': 52, 'line_content': '//! at least two instructions: one for the secp256k1 program to verify the'}, {'line_number': 53, 'line_content': '//! signatures, and one for a custom program that will check that the secp256k1'}, {'line_number': 68, 'line_content': '//!   - Sign the [`keccak`]-hashed messages with a secp256k1 ECDSA library,'}, {'line_number': 69, 'line_content': '//!     like the [`libsecp256k1`] crate.'}, {'line_number': 71, 'line_content': '//!     Ethereum address data that will be used by the secp256k1 instruction.'}, {'line_number': 72, 'line_content': '//!   - Build the secp256k1 program instruction data, specifying the number of'}, {'line_number': 77, 'line_content': '//!     of the secp256k1 native program.'}, {'line_number': 80, 'line_content': '//!   - Load the secp256k1 instruction data with'}, {'line_number': 82, 'line_content': '//!   - Check that the secp256k1 program ID is equal to'}, {'line_number': 83, 'line_content': '//!     [`secp256k1_program::ID`], so that the signature verification cannot be'}, {'line_number': 88, 'line_content': '//! [`secp256k1_program::ID`]: crate::secp256k1_program::ID'}, {'line_number': 90, 'line_content': '//! The signature, message, or Ethereum addresses may reside in the secp256k1'}, {'line_number': 92, 'line_content': '//! of the protocol required by the secp256k1 instruction to locate the'}, {'line_number': 94, 'line_content': '//! `new_secp256k1_instruction` for simple signature verification.'}, {'line_number': 97, 'line_content': '//! transactions necessary for properly using the secp256k1 native program.'}, {'line_number': 101, 'line_content': '//! the the secp256k1 instruction data. It must be done manually.'}, {'line_number': 103, 'line_content': '//! The secp256k1 program is implemented with the [`libsecp256k1`] crate,'}, {'line_number': 106, 'line_content': '//! [`libsecp256k1`]: https://docs.rs/libsecp256k1/latest/libsecp256k1'}, {'line_number': 108, 'line_content': '//! # Layout and interpretation of the secp256k1 instruction data'}, {'line_number': 110, 'line_content': '//! The secp256k1 instruction data contains:'}, {'line_number': 149, 'line_content': '//! **The solana `secp256k1_recover` function does not prevent signature'}, {'line_number': 150, 'line_content': '//! malleability**. This is in contrast to the Bitcoin secp256k1 library, which'}, {'line_number': 156, 'line_content': '//! malleability, see the documentation for the [`secp256k1_recover`] syscall.'}, {'line_number': 160, 'line_content': '//! Most programs will want to be conservative about the layout of the secp256k1 instruction'}, {'line_number': 169, 'line_content': '//! Loading the secp256k1 instruction data within a program requires access to'}, {'line_number': 179, 'line_content': '//! Programs should _always_ verify that the secp256k1 program ID loaded through'}, {'line_number': 180, 'line_content': '//! the instructions sysvar has the same value as in the [`secp256k1_program`]'}, {'line_number': 183, 'line_content': '//! [`secp256k1_program`]: crate::secp256k1_program'}, {'line_number': 206, 'line_content': '//! to parse the secp256k1 instruction data from within a Solana program.'}, {'line_number': 209, 'line_content': '//! mod secp256k1_defs {'}, {'line_number': 229, 'line_content': '//!        secp256k1_instr_data: &[u8],'}, {'line_number': 232, 'line_content': '//!         let num_structs = *secp256k1_instr_data'}, {'line_number': 237, 'line_content': '//!         let all_structs_slice = secp256k1_instr_data'}, {'line_number': 260, 'line_content': '//! ## Example: Signing and verifying with `new_secp256k1_instruction`'}, {'line_number': 262, 'line_content': '//! This example demonstrates the simplest way to use the secp256k1 program, by'}, {'line_number': 263, 'line_content': '//! calling [`new_secp256k1_instruction`] to sign a single message and build the'}, {'line_number': 264, 'line_content': '//! corresponding secp256k1 instruction.'}, {'line_number': 268, 'line_content': '//! and the Solana program will introspect the secp256k1 instruction to verify'}, {'line_number': 271, 'line_content': '//! The Solana program. Note that it uses `libsecp256k1` version 0.7.0 to parse'}, {'line_number': 272, 'line_content': '//! the secp256k1 signature to prevent malleability.'}, {'line_number': 275, 'line_content': '//! # mod secp256k1_defs {'}, {'line_number': 295, 'line_content': '//! #        secp256k1_instr_data: &[u8],'}, {'line_number': 298, 'line_content': '//! #         let num_structs = *secp256k1_instr_data'}, {'line_number': 303, 'line_content': '//! #         let all_structs_slice = secp256k1_instr_data'}, {'line_number': 329, 'line_content': '//!     secp256k1_program,'}, {'line_number': 333, 'line_content': '//! /// An Ethereum address corresponding to a secp256k1 secret key that is'}, {'line_number': 340, 'line_content': '//! /// Check the secp256k1 instruction to ensure it was signed by'}, {'line_number': 345, 'line_content': '//! fn demo_secp256k1_verify_basic('}, {'line_number': 356, 'line_content': '//!     // Load the secp256k1 instruction.'}, {'line_number': 357, 'line_content': '//!     // `new_secp256k1_instruction` generates an instruction that must be at index 0.'}, {'line_number': 358, 'line_content': '//!     let secp256k1_instr ='}, {'line_number': 361, 'line_content': '//!     // Verify it is a secp256k1 instruction.'}, {'line_number': 362, 'line_content': '//!     // This is security-critical - what if the transaction uses an imposter secp256k1 program?'}, {'line_number': 363, 'line_content': '//!     assert!(secp256k1_program::check_id(&secp256k1_instr.program_id));'}, {'line_number': 367, 'line_content': '//!     assert!(secp256k1_instr.data.len() > 1);'}, {'line_number': 369, 'line_content': '//!     let num_signatures = secp256k1_instr.data[0];'}, {'line_number': 370, 'line_content': '//!     // `new_secp256k1_instruction` generates an instruction that contains one signature.'}, {'line_number': 374, 'line_content': '//!     let offsets: secp256k1_defs::SecpSignatureOffsets ='}, {'line_number': 375, 'line_content': '//!         secp256k1_defs::iter_signature_offsets(&secp256k1_instr.data)?'}, {'line_number': 379, 'line_content': '//!     // `new_secp256k1_instruction` generates an instruction that only uses instruction index 0.'}, {'line_number': 388, 'line_content': '//!         let signature = &secp256k1_instr.data[offsets.signature_offset as usize'}, {'line_number': 389, 'line_content': '//!             ..offsets.signature_offset as usize + secp256k1_defs::SIGNATURE_SERIALIZED_SIZE];'}, {'line_number': 390, 'line_content': '//!         let signature = libsecp256k1::Signature::parse_standard_slice(signature)'}, {'line_number': 400, 'line_content': '//!     // to do here to ensure it trusts the secp256k1 instruction, e.g.:'}, {'line_number': 403, 'line_content': '//!     // - verify the secp256k1 signer is authorized'}, {'line_number': 405, 'line_content': '//!     // Here we are checking the secp256k1 pubkey against a known authorized pubkey.'}, {'line_number': 406, 'line_content': '//!     let eth_address = &secp256k1_instr.data[offsets.eth_address_offset as usize'}, {'line_number': 407, 'line_content': '//!         ..offsets.eth_address_offset as usize + secp256k1_defs::HASHED_PUBKEY_SERIALIZED_SIZE];'}, {'line_number': 425, 'line_content': '//!     secp256k1_instruction,'}, {'line_number': 431, 'line_content': '//! fn demo_secp256k1_verify_basic('}, {'line_number': 433, 'line_content': '//!     secp256k1_secret_key: &libsecp256k1::SecretKey,'}, {'line_number': 437, 'line_content': '//!     // Internally to `new_secp256k1_instruction` and'}, {'line_number': 438, 'line_content': '//!     // `secp256k_instruction::verify` (the secp256k1 program), this message is'}, {'line_number': 441, 'line_content': '//!     let secp256k1_instr = secp256k1_instruction::new_secp256k1_instruction(&secp256k1_secret_key, msg);'}, {'line_number': 453, 'line_content': '//!         &[secp256k1_instr, program_instr],'}, {'line_number': 467, 'line_content': '//! This examples demonstrates manually creating a secp256k1 instruction'}, {'line_number': 470, 'line_content': '//! use of the secp256k1 program.'}, {'line_number': 472, 'line_content': '//! Recall that the secp256k1 program will accept signatures, messages, and'}, {'line_number': 479, 'line_content': '//! secp256k1 instruction. The code for storing this data across multiple'}, {'line_number': 488, 'line_content': '//! # mod secp256k1_defs {'}, {'line_number': 508, 'line_content': '//! #        secp256k1_instr_data: &[u8],'}, {'line_number': 511, 'line_content': '//! #         let num_structs = *secp256k1_instr_data'}, {'line_number': 516, 'line_content': '//! #         let all_structs_slice = secp256k1_instr_data'}, {'line_number': 542, 'line_content': '//!     secp256k1_program,'}, {'line_number': 548, 'line_content': '//!     signature: [u8; secp256k1_defs::SIGNATURE_SERIALIZED_SIZE],'}, {'line_number': 550, 'line_content': '//!     eth_address: [u8; secp256k1_defs::HASHED_PUBKEY_SERIALIZED_SIZE],'}, {'line_number': 554, 'line_content': '//! /// Load all signatures indicated in the secp256k1 instruction.'}, {'line_number': 559, 'line_content': '//!     secp256k1_instr_data: &[u8],'}, {'line_number': 563, 'line_content': '//!     for offsets in secp256k1_defs::iter_signature_offsets(secp256k1_instr_data)? {'}, {'line_number': 579, 'line_content': '//!             ..offsets.signature_offset as usize + secp256k1_defs::SIGNATURE_SERIALIZED_SIZE];'}, {'line_number': 581, 'line_content': '//!             [offsets.signature_offset as usize + secp256k1_defs::SIGNATURE_SERIALIZED_SIZE];'}, {'line_number': 583, 'line_content': '//!             ..offsets.eth_address_offset as usize + secp256k1_defs::HASHED_PUBKEY_SERIALIZED_SIZE];'}, {'line_number': 588, 'line_content': '//!             <[u8; secp256k1_defs::SIGNATURE_SERIALIZED_SIZE]>::try_from(signature).unwrap();'}, {'line_number': 590, 'line_content': '//!             <[u8; secp256k1_defs::HASHED_PUBKEY_SERIALIZED_SIZE]>::try_from(eth_address).unwrap();'}, {'line_number': 603, 'line_content': '//! fn demo_secp256k1_custom_many('}, {'line_number': 613, 'line_content': '//!     let secp256k1_instr ='}, {'line_number': 616, 'line_content': '//!     assert!(secp256k1_program::check_id(&secp256k1_instr.program_id));'}, {'line_number': 618, 'line_content': '//!     let signatures = load_signatures(&secp256k1_instr.data, instructions_sysvar_account)?;'}, {'line_number': 642, 'line_content': '//!     secp256k1_instruction::{'}, {'line_number': 659, 'line_content': '//! /// Create the instruction data for a secp256k1 instruction.'}, {'line_number': 661, 'line_content': '//! /// `instruction_index` is the index the secp256k1 instruction will appear'}, {'line_number': 663, 'line_content': '//! /// the signatures into the secp256k1 instruction data, and not into any other'}, {'line_number': 665, 'line_content': '//! fn make_secp256k1_instruction_data('}, {'line_number': 671, 'line_content': ""//!     // We're going to pack all the signatures into the secp256k1 instruction data.""}, {'line_number': 673, 'line_content': '//!     // the secp256k1 program parses to find those signatures.'}, {'line_number': 728, 'line_content': '//! fn demo_secp256k1_custom_many('}, {'line_number': 736, 'line_content': '//!         let secret_key = libsecp256k1::SecretKey::random(&mut rand0_7::thread_rng());'}, {'line_number': 743, 'line_content': '//!         let secp_message = libsecp256k1::Message::parse(&message_hash.0);'}, {'line_number': 744, 'line_content': '//!         let (signature, recovery_id) = libsecp256k1::sign(&secp_message, &secret_key);'}, {'line_number': 748, 'line_content': '//!         let public_key = libsecp256k1::PublicKey::from_secret_key(&secret_key);'}, {'line_number': 749, 'line_content': '//!         let eth_address = secp256k1_instruction::construct_eth_pubkey(&public_key);'}, {'line_number': 759, 'line_content': '//!     let secp256k1_instr_data = make_secp256k1_instruction_data(&signatures, 0)?;'}, {'line_number': 760, 'line_content': '//!     let secp256k1_instr = Instruction::new_with_bytes('}, {'line_number': 761, 'line_content': '//!         solana_sdk::secp256k1_program::ID,'}, {'line_number': 762, 'line_content': '//!         &secp256k1_instr_data,'}, {'line_number': 776, 'line_content': '//!         &[secp256k1_instr, program_instr],'}, {'line_number': 793, 'line_content': 'libsecp256k1_fail_on_bad_count, libsecp256k1_fail_on_bad_count2, FeatureSet,'}, {'line_number': 807, 'line_content': '/// Offsets of signature data within a secp256k1 instruction.'}, {'line_number': 830, 'line_content': '/// Sign a message and create a secp256k1 program instruction to verify the signature.'}, {'line_number': 832, 'line_content': '/// This function is suitable for simple uses of the secp256k1 program.'}, {'line_number': 833, 'line_content': '/// More complex uses must encode the secp256k1 instruction data manually.'}, {'line_number': 846, 'line_content': 'pub fn new_secp256k1_instruction('}, {'line_number': 847, 'line_content': 'priv_key: &libsecp256k1::SecretKey,'}, {'line_number': 850, 'line_content': 'let secp_pubkey = libsecp256k1::PublicKey::from_secret_key(priv_key);'}, {'line_number': 857, 'line_content': 'let message = libsecp256k1::Message::parse(&message_hash_arr);'}, {'line_number': 858, 'line_content': 'let (signature, recovery_id) = libsecp256k1::sign(&message, priv_key);'}, {'line_number': 900, 'line_content': 'program_id: solana_sdk::secp256k1_program::id(),'}, {'line_number': 906, 'line_content': '/// Creates an Ethereum address from a secp256k1 public key.'}, {'line_number': 908, 'line_content': 'pubkey: &libsecp256k1::PublicKey,'}, {'line_number': 916, 'line_content': '/// Verifies the signatures specified in the secp256k1 instruction data.'}, {'line_number': 918, 'line_content': ""/// This is same the verification routine executed by the runtime's secp256k1 native program,""}, {'line_number': 921, 'line_content': ""/// `data` is the secp256k1 program's instruction data. `instruction_datas` is""}, {'line_number': 923, 'line_content': ""/// including the secp256k1 program's instruction data.""}, {'line_number': 927, 'line_content': '/// subsequent to the addition of the secp256k1 native program. For many'}, {'line_number': 938, 'line_content': 'if (feature_set.is_active(&libsecp256k1_fail_on_bad_count::id())'}, {'line_number': 939, 'line_content': '|| feature_set.is_active(&libsecp256k1_fail_on_bad_count2::id()))'}, {'line_number': 944, 'line_content': '// correct, fail the instruction to catch probable invalid secp256k1'}, {'line_number': 975, 'line_content': 'let signature = libsecp256k1::Signature::parse_standard_slice('}, {'line_number': 980, 'line_content': 'let recovery_id = libsecp256k1::RecoveryId::parse(signature_instruction[sig_end])'}, {'line_number': 1003, 'line_content': 'let pubkey = libsecp256k1::recover('}, {'line_number': 1004, 'line_content': '&libsecp256k1::Message::parse_slice(&message_hash).unwrap(),'}, {'line_number': 1046, 'line_content': 'secp256k1_instruction::{'}, {'line_number': 1047, 'line_content': 'new_secp256k1_instruction, SecpSignatureOffsets, SIGNATURE_OFFSETS_SERIALIZED_SIZE,'}, {'line_number': 1215, 'line_content': 'fn test_secp256k1() {'}, {'line_number': 1223, 'line_content': 'let secp_privkey = libsecp256k1::SecretKey::random(&mut thread_rng());'}, {'line_number': 1225, 'line_content': 'let mut secp_instruction = new_secp256k1_instruction(&secp_privkey, message_arr);'}, {'line_number': 1254, 'line_content': 'let secret_key = libsecp256k1::SecretKey::random(&mut thread_rng());'}, {'line_number': 1255, 'line_content': 'let public_key = libsecp256k1::PublicKey::from_secret_key(&secret_key);'}, {'line_number': 1265, 'line_content': 'let secp_message = libsecp256k1::Message::parse(&message_hash.0);'}, {'line_number': 1266, 'line_content': 'let (signature, recovery_id) = libsecp256k1::sign(&secp_message, &secret_key);'}, {'line_number': 1271, 'line_content': 'let alt_recovery_id = libsecp256k1::RecoveryId::parse(recovery_id.serialize() ^ 1).unwrap();'}]"
29,/Users/andrew/Documents/projects/solana/sdk/src/feature_set.rs,"[{'line_number': 57, 'line_content': 'pub mod secp256k1_program_enabled {'}, {'line_number': 89, 'line_content': 'pub mod secp256k1_recover_syscall_enabled {'}, {'line_number': 117, 'line_content': 'pub mod libsecp256k1_0_5_upgrade_enabled {'}, {'line_number': 157, 'line_content': 'pub mod libsecp256k1_fail_on_bad_count {'}, {'line_number': 161, 'line_content': 'pub mod libsecp256k1_fail_on_bad_count2 {'}, {'line_number': 333, 'line_content': 'pub mod limit_secp256k1_recovery_id {'}, {'line_number': 795, 'line_content': '(secp256k1_program_enabled::id(), ""secp256k1 program""),'}, {'line_number': 808, 'line_content': '(secp256k1_recover_syscall_enabled::id(), ""secp256k1_recover syscall""),'}, {'line_number': 815, 'line_content': '(libsecp256k1_0_5_upgrade_enabled::id(), ""upgrade libsecp256k1 to v0.5.0""),'}, {'line_number': 824, 'line_content': '(libsecp256k1_fail_on_bad_count::id(), ""fail libsecp256k1_verify if count appears wrong""),'}, {'line_number': 825, 'line_content': '(libsecp256k1_fail_on_bad_count2::id(), ""fail libsecp256k1_verify if count appears wrong""),'}, {'line_number': 867, 'line_content': '(limit_secp256k1_recovery_id::id(), ""limit secp256k1 recovery id""),'}]"
30,/Users/andrew/Documents/projects/solana/sdk/src/precompiles.rs,"[{'line_number': 80, 'line_content': 'crate::secp256k1_program::id(),'}, {'line_number': 82, 'line_content': 'crate::secp256k1_instruction::verify,'}]"
31,/Users/andrew/Documents/projects/solana/accounts-db/Cargo.toml,"[{'line_number': 73, 'line_content': 'libsecp256k1 = { workspace = true }'}]"
